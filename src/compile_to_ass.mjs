import _ from "underscore"

import { decompileInlineTags, getDrawingString, ms2assTime } from "./util"

export function compile2ass(data) {
  return `[Script Info]
; Script generated by ass_motion v0.0.1
; http://niceme.me/
${function() {
  let t = ""
  for (let i in data.info) {
    t += `${i}: ${data.info[i]}\n`
  }
  if (data.garbage) {
    t += "\n[Aegisub Project Garbage]\n"
    for (let i in data.garbage) {
      t += `${i}: ${data.garbage[i]}\n`
    }
  }
  return t
}()}
[V4+ Styles]
Format: Name, Fontname, Fontsize, PrimaryColour, SecondaryColour, OutlineColour, BackColour, Bold, Italic, Underline, StrikeOut, ScaleX, ScaleY, Spacing, Angle, BorderStyle, Outline, Shadow, Alignment, MarginL, MarginR, MarginV, Encoding
${function() {
  let out = ""
  _.each(data.styles, function(s) {
    out += "Style: "
    _.each(s.style, function(a) {
      out += `${a},`
    })
    out = `${out.slice(0, -1)}\n`
  })
  return out
}()}
[Events]
Format: Layer, Start, End, Style, Name, MarginL, MarginR, MarginV, Effect, Text
${function() {
  let out = ""
  _.each(data.dialogues, function(d) {
    out += `${d.isComment ? "Comment" : "Dialogue"}: ${d.layer},${ms2assTime(d.start)},${ms2assTime(d.end)},${d.slices[0].style},${d.actor},${d.margin.left},${d.margin.right},${d.margin.vertical},${d.effect},${function() {
      // global tags
      let text = `{\\an${d.alignment}`
      text += d.pos   ? `\\pos(${d.pos.x},${d.pos.y})`                                                                      : ""
      text += d.org   ? `\\org(${d.org.x},${d.org.y})`                                                                      : ""
      text += d.move  ? `\\move(${_.values(d.move).join(",")})`                                                             : ""
      text += d.fade  ? `\\${d.fade.type}(${_.values(d.fade).slice(1).join(",")})`                                          : ""
      text += d.clip  ? `\\${d.clip.inverse ? "iclip" : "clip"}(${d.clip.dots ? _.values(d.clip.dots).join(",") : `${d.clip.scale},${getDrawingString(d.clip.drawing)}`})}`      : "}"
      // inline tags with text
      _.each(d.slices[0].fragments, function(f) {
        if (f.tag) {
          text += "{"
          for (let i in f.tag) {
            text += decompileInlineTags(i, f.tag[i])
          }
          text += "}"
        }
        text += f.text ? f.text : getDrawingString(f.drawing)
      })
      return text
    }()}\n`
  })
  return out
}()}`
}
